// <auto-generated />
using System;
using System.Collections.Generic;
using HospitalLibrary.Core.Enums;
using HospitalLibrary.Core.Report.Model;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20230115210451_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "allergy", new[] { "pollen", "dust", "feathers", "cats", "dogs", "garlic", "peanuts", "milk", "rice", "celery", "gluten", "crustaceans", "eggs", "soya", "fish", "nuts", "insects", "latex", "shellfish", "tetracycline", "penicillin", "anaesthetics", "dilantin", "tegretol", "cephalosporins", "sulphonamides" })
                .HasPostgresEnum(null, "appointment_status", new[] { "scheduled", "finished", "cancelled" })
                .HasPostgresEnum(null, "blood_type", new[] { "a", "b", "ab", "o" })
                .HasPostgresEnum(null, "equipment_type", new[] { "bed", "bandages", "medicine" })
                .HasPostgresEnum(null, "gender", new[] { "male", "female" })
                .HasPostgresEnum(null, "specialty", new[] { "cardiologist", "anesthesiologist", "neurosurgeon", "general" })
                .HasPostgresEnum(null, "vacation_request_status", new[] { "waiting_for_approval", "cancelled", "accepted", "disapproved" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.Core.Appointment.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<AppointmentStatus>("Status")
                        .HasColumnType("appointment_status");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.ApptSchedulingSession.Storage.EventStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("EventInstance")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EventStreams");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Blood.BloodConsumptionRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("SourceBank")
                        .HasColumnType("uuid");

                    b.Property<BloodType>("Type")
                        .HasColumnType("blood_type");

                    b.HasKey("Id");

                    b.ToTable("BloodConsumptionRecords");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Blood.BloodRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Due")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BloodRequests");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Blood.BloodSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SourceBank")
                        .HasColumnType("uuid");

                    b.Property<BloodType>("Type")
                        .HasColumnType("blood_type");

                    b.HasKey("Id");

                    b.ToTable("HospitalBlood");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Amount = 10.0,
                            SourceBank = new Guid("2d4894b6-02e4-4288-a3d3-089489563190"),
                            Type = BloodType.O
                        },
                        new
                        {
                            Id = 1,
                            Amount = 54.0,
                            SourceBank = new Guid("2d4894b6-02e4-4288-a3d3-089489563190"),
                            Type = BloodType.A
                        },
                        new
                        {
                            Id = 5,
                            Amount = 23.0,
                            SourceBank = new Guid("55510651-d36e-444d-95fb-871e0902cd7e"),
                            Type = BloodType.A
                        },
                        new
                        {
                            Id = 7,
                            Amount = 24.0,
                            SourceBank = new Guid("a60460fe-0d33-478d-93b3-45d424079e66"),
                            Type = BloodType.A
                        },
                        new
                        {
                            Id = 3,
                            Amount = 15.0,
                            SourceBank = new Guid("2d4894b6-02e4-4288-a3d3-089489563190"),
                            Type = BloodType.AB
                        },
                        new
                        {
                            Id = 9,
                            Amount = 34.0,
                            SourceBank = new Guid("a60460fe-0d33-478d-93b3-45d424079e66"),
                            Type = BloodType.AB
                        },
                        new
                        {
                            Id = 2,
                            Amount = 30.0,
                            SourceBank = new Guid("2d4894b6-02e4-4288-a3d3-089489563190"),
                            Type = BloodType.B
                        },
                        new
                        {
                            Id = 6,
                            Amount = 40.0,
                            SourceBank = new Guid("55510651-d36e-444d-95fb-871e0902cd7e"),
                            Type = BloodType.B
                        },
                        new
                        {
                            Id = 8,
                            Amount = 10.0,
                            SourceBank = new Guid("a60460fe-0d33-478d-93b3-45d424079e66"),
                            Type = BloodType.B
                        },
                        new
                        {
                            Id = 10,
                            Amount = 40.0,
                            SourceBank = new Guid("55510651-d36e-444d-95fb-871e0902cd7e"),
                            Type = BloodType.O
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Consiliums.Consilium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DoctorIds")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Specialties")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Consiliums.ConsiliumAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConsiliumId")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<int?>("DoctorId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConsiliumId");

                    b.HasIndex("DoctorId1");

                    b.ToTable("ConsiliumAppointments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Doctor.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("EndWorkTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<Specialty>("Specialty")
                        .HasColumnType("specialty");

                    b.Property<int>("StartWorkTime")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 32,
                            Email = "doctorfilip@hotmail.com",
                            EndWorkTime = 13,
                            Name = "Filip",
                            RoomId = 1,
                            Specialty = Specialty.Cardiologist,
                            StartWorkTime = 8,
                            Surname = "Marinkovic"
                        },
                        new
                        {
                            Id = 2,
                            Age = 29,
                            Email = "gorana.miljkovic@gmail.com",
                            EndWorkTime = 20,
                            Name = "Gorana",
                            RoomId = 2,
                            Specialty = Specialty.Anesthesiologist,
                            StartWorkTime = 13,
                            Surname = "Miljkovic"
                        },
                        new
                        {
                            Id = 3,
                            Age = 40,
                            Email = "petar.dobrosavljevic@gmail.com",
                            EndWorkTime = 20,
                            Name = "Petar",
                            RoomId = 3,
                            Specialty = Specialty.Cardiologist,
                            StartWorkTime = 13,
                            Surname = "Dobrosavljevic"
                        },
                        new
                        {
                            Id = 4,
                            Age = 27,
                            Email = "stefan.simic@gmail.com",
                            EndWorkTime = 13,
                            Name = "Stefan",
                            RoomId = 4,
                            Specialty = Specialty.Anesthesiologist,
                            StartWorkTime = 8,
                            Surname = "Simic"
                        },
                        new
                        {
                            Id = 5,
                            Age = 51,
                            Email = "bojana.jelic@gmail.com",
                            EndWorkTime = 16,
                            Name = "Bojana",
                            RoomId = 5,
                            Specialty = Specialty.Neurosurgeon,
                            StartWorkTime = 8,
                            Surname = "Jelic"
                        },
                        new
                        {
                            Id = 6,
                            Age = 34,
                            Email = "katarina.radic@gmail.com",
                            EndWorkTime = 20,
                            Name = "Katarina",
                            RoomId = 6,
                            Specialty = Specialty.Neurosurgeon,
                            StartWorkTime = 14,
                            Surname = "Radic"
                        },
                        new
                        {
                            Id = 7,
                            Age = 27,
                            Email = "milica.jezdic@gmail.com",
                            EndWorkTime = 13,
                            Name = "Milica",
                            RoomId = 7,
                            Specialty = Specialty.General,
                            StartWorkTime = 7,
                            Surname = "Jezdic"
                        },
                        new
                        {
                            Id = 8,
                            Age = 27,
                            Email = "zoran.katic@gmail.com",
                            EndWorkTime = 13,
                            Name = "Zoran",
                            RoomId = 8,
                            Specialty = Specialty.General,
                            StartWorkTime = 8,
                            Surname = "Katic"
                        },
                        new
                        {
                            Id = 9,
                            Age = 35,
                            Email = "bojan.stanic@gmail.com",
                            EndWorkTime = 19,
                            Name = "Bojan",
                            RoomId = 9,
                            Specialty = Specialty.General,
                            StartWorkTime = 11,
                            Surname = "Stanic"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Feedback.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Anonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<string>("PatientSurname")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<bool>("VisibleToPublic")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Infrastructure.DomainEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ReportId")
                        .HasColumnType("text");

                    b.Property<string>("event_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportCreationEvents");

                    b.HasDiscriminator<string>("event_type").HasValue("DomainEvent");
                });

            modelBuilder.Entity("HospitalLibrary.Core.InpatientTreatmentRecord.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<EquipmentType>("Type")
                        .HasColumnType("equipment_type");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Quantity = 1,
                            RoomId = 1,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "2",
                            Quantity = 1,
                            RoomId = 2,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "3",
                            Quantity = 1,
                            RoomId = 1,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "4",
                            Quantity = 1,
                            RoomId = 3,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "5",
                            Quantity = 1,
                            RoomId = 3,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "6",
                            Quantity = 1,
                            RoomId = 2,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "7",
                            Quantity = 1,
                            RoomId = 2,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "8",
                            Quantity = 1,
                            RoomId = 6,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "9",
                            Quantity = 1,
                            RoomId = 6,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "10",
                            Quantity = 1,
                            RoomId = 5,
                            Type = EquipmentType.BED
                        },
                        new
                        {
                            Id = "11",
                            Quantity = 1,
                            RoomId = 5,
                            Type = EquipmentType.BED
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.InpatientTreatmentRecord.InpatientTreatmentRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AdmissionReason")
                        .HasColumnType("text");

                    b.Property<string>("BedID")
                        .HasColumnType("text");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DischargeReason")
                        .HasColumnType("text");

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("RoomID")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Therapy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InpatientTreatmentRecords");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Patient.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AddressJson")
                        .HasColumnType("jsonb");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<List<Allergy>>("Allergies")
                        .HasColumnType("allergy[]");

                    b.Property<BloodType>("BloodType")
                        .HasColumnType("blood_type");

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Patient.PatientHealthMeasurements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("MeasurementTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientHealthMeasurements");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.DrugList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DrugsList");

                    b.HasData(
                        new
                        {
                            Id = "aspirin",
                            CompanyName = "Galenika",
                            Name = "Aspirin"
                        },
                        new
                        {
                            Id = "brufen",
                            CompanyName = "Galenika",
                            Name = "Brufen"
                        },
                        new
                        {
                            Id = "panadol",
                            CompanyName = "Hemofarm",
                            Name = "Panadol"
                        },
                        new
                        {
                            Id = "bensedin",
                            CompanyName = "Galenika",
                            Name = "Bensedin"
                        },
                        new
                        {
                            Id = "bromazepam",
                            CompanyName = "Hemofarm",
                            Name = "Bromazepam"
                        },
                        new
                        {
                            Id = "fervex",
                            CompanyName = "Bayer",
                            Name = "Fervex"
                        },
                        new
                        {
                            Id = "prospan",
                            CompanyName = "Bayer",
                            Name = "Prospan"
                        },
                        new
                        {
                            Id = "strepsils",
                            CompanyName = "Bayer",
                            Name = "Strepsils"
                        },
                        new
                        {
                            Id = "rivotril",
                            CompanyName = "Galenika",
                            Name = "Rivotril"
                        },
                        new
                        {
                            Id = "baktrim",
                            CompanyName = "Hemofarm",
                            Name = "Baktrim"
                        },
                        new
                        {
                            Id = "gentamicin",
                            CompanyName = "Galenika",
                            Name = "Gentamicin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.DrugPrescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<ICollection<Drug>>("Drugs")
                        .HasColumnType("jsonb");

                    b.Property<string>("ReportId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DrugPrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppointmentId")
                        .HasColumnType("text");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DayAndTimeOfMaking")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("InitialVersion")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("ReportDescription")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.SymptomList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SymptomList");

                    b.HasData(
                        new
                        {
                            Id = "Headache",
                            Name = "Headache"
                        },
                        new
                        {
                            Id = "High blood pressure",
                            Name = "High blood pressure"
                        },
                        new
                        {
                            Id = "Vertigo",
                            Name = "Vertigo"
                        },
                        new
                        {
                            Id = "Fatigue",
                            Name = "Fatigue"
                        },
                        new
                        {
                            Id = "Fever",
                            Name = "Fever"
                        },
                        new
                        {
                            Id = "Short breath",
                            Name = "Short breath"
                        },
                        new
                        {
                            Id = "Chronic pain",
                            Name = "Chronic pain"
                        },
                        new
                        {
                            Id = "Vomiting",
                            Name = "Vomiting"
                        },
                        new
                        {
                            Id = "Cough",
                            Name = "Cough"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Room.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Floor = 1,
                            Number = "1A"
                        },
                        new
                        {
                            Id = 2,
                            Floor = 1,
                            Number = "1B"
                        },
                        new
                        {
                            Id = 3,
                            Floor = 1,
                            Number = "1C"
                        },
                        new
                        {
                            Id = 4,
                            Floor = 2,
                            Number = "2A"
                        },
                        new
                        {
                            Id = 5,
                            Floor = 2,
                            Number = "2B"
                        },
                        new
                        {
                            Id = 6,
                            Floor = 2,
                            Number = "2C"
                        },
                        new
                        {
                            Id = 7,
                            Floor = 3,
                            Number = "3A"
                        },
                        new
                        {
                            Id = 8,
                            Floor = 3,
                            Number = "3B"
                        },
                        new
                        {
                            Id = 9,
                            Floor = 3,
                            Number = "3F"
                        },
                        new
                        {
                            Id = 999,
                            Floor = 4,
                            Number = "Consilium Hall"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("IdByRole")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Email = "manageremail@gmail.com",
                            IdByRole = 1,
                            Name = "Milica",
                            Password = "AJMjUEYXE/EtKJlD2NfDblnM15ik0Wo547IgBuUFWyJtWRhj5PSBO/ttok4DT679oA==",
                            Role = "MANAGER",
                            Surname = "Peric"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Email = "doctorfilip@hotmail.com",
                            IdByRole = 1,
                            Name = "Filip",
                            Password = "AKTyL6i1roIESl/br0aDrci1H15gFj0Wwede2GYJi0csDSUhrydNioQui0K3gfkJcA==",
                            Role = "DOCTOR",
                            Surname = "Marinkovic"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Email = "gorana.miljkovic@gmail.com",
                            IdByRole = 2,
                            Name = "Gorana",
                            Password = "AGEU6JzOVaDY+DYUWWiWOKbrpIHMwuW2fyh6CJai+D159dhE0IRmWjM3oQVlAS3hlw==",
                            Role = "DOCTOR",
                            Surname = "Miljkovic"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Email = "petar.dobrosavljevic@gmail.com",
                            IdByRole = 3,
                            Name = "Petar",
                            Password = "AAQWjfiC3pkhMnwzKmJjhwytFO73mFNYklxj6/hTSj0aS3j3KxTe7TsmqVmXSy0fnQ==",
                            Role = "DOCTOR",
                            Surname = "Dobrosavljevic"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Email = "stefan.simic@gmail.com",
                            IdByRole = 4,
                            Name = "Stefan",
                            Password = "AJbKG1PpVed0VCFu358yyNfXy8RsWk6sB55ejeXQaFOV3nQxSImn6qsLGS6N5oQfqg==",
                            Role = "DOCTOR",
                            Surname = "Simic"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            Email = "bojana.jelic@gmail.com",
                            IdByRole = 5,
                            Name = "Bojana",
                            Password = "AEHe2m50J9F9RMJHmvuxZAQ9VFzCV7ebMjJFG/NND8GQM/C3tBut/fl1mhz0veof5Q==",
                            Role = "DOCTOR",
                            Surname = "Jelic"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            Email = "katarina.radic@gmail.com",
                            IdByRole = 6,
                            Name = "Katarina",
                            Password = "APxtdhzFubuhYnLITUwNYcwwt0ySvkTJ7C5qayocG3x5L9p3MbN3P0f27EYOCCInvw==",
                            Role = "DOCTOR",
                            Surname = "Radic"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            Email = "milica.jezdic@gmail.com",
                            IdByRole = 7,
                            Name = "Milica",
                            Password = "ADCyG1fHX04K+wTwzJDPmb78k1YWMfTQqgeDZKorMbE46o0+zXEc2NF1SHjkEAiaWw==",
                            Role = "DOCTOR",
                            Surname = "Jezdic"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            Email = "zoran.katic@gmail.com",
                            IdByRole = 8,
                            Name = "Zoran",
                            Password = "AA+E3CZi5TQ3+ciHGpGi7NFiE2GZDawBlSyBOK4IZd28ZB6oZWWOqY+gxY93xmI8kw==",
                            Role = "DOCTOR",
                            Surname = "Katic"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            Email = "bojan.stanic@gmail.com",
                            IdByRole = 9,
                            Name = "Bojan",
                            Password = "AL4E2lLskVtWAOnmsPLxHDP8hxJVqshvbL2F6uKhd51bCB/n07IYj6uabGAKTtYZlg==",
                            Role = "DOCTOR",
                            Surname = "Stanic"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Vacation.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<VacationRequestStatus>("Status")
                        .HasColumnType("vacation_request_status");

                    b.Property<bool>("Urgency")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("VacationRequests");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.BackButtonClicked", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Infrastructure.DomainEvent");

                    b.Property<DateTime>("ClickedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FromStep")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("back");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.NextButtonClicked", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Infrastructure.DomainEvent");

                    b.Property<DateTime>("ClickedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("NextButtonClicked_ClickedAt");

                    b.Property<int>("FromStep")
                        .HasColumnType("integer")
                        .HasColumnName("NextButtonClicked_FromStep");

                    b.HasDiscriminator().HasValue("next");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.ReportCreated", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Infrastructure.DomainEvent");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasDiscriminator().HasValue("created");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.ReportFinished", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Infrastructure.DomainEvent");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasDiscriminator().HasValue("finished");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Appointment.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Doctor.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Room.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Blood.BloodRequest", b =>
                {
                    b.OwnsOne("HospitalLibrary.Core.Blood.Blood", "Blood", b1 =>
                        {
                            b1.Property<int>("BloodRequestId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<double>("Amount")
                                .HasColumnType("double precision");

                            b1.Property<BloodType>("Type")
                                .HasColumnType("blood_type");

                            b1.HasKey("BloodRequestId");

                            b1.ToTable("BloodRequests");

                            b1.WithOwner()
                                .HasForeignKey("BloodRequestId");
                        });

                    b.Navigation("Blood");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Consiliums.ConsiliumAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Consiliums.Consilium", "Consilium")
                        .WithMany("ConsiliumAppointments")
                        .HasForeignKey("ConsiliumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Doctor.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId1");

                    b.Navigation("Consilium");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Doctor.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Room.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Infrastructure.DomainEvent", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Report.Model.Report", null)
                        .WithMany("Changes")
                        .HasForeignKey("ReportId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.InpatientTreatmentRecord.Equipment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Room.Room", null)
                        .WithMany("Equipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Patient.PatientHealthMeasurements", b =>
                {
                    b.OwnsOne("HospitalLibrary.Core.Patient.HealthMeasurements", "HealthMeasurements", b1 =>
                        {
                            b1.Property<int>("PatientHealthMeasurementsId")
                                .HasColumnType("integer");

                            b1.Property<int>("BloodPressureLower")
                                .HasColumnType("integer");

                            b1.Property<int>("BloodPressureUpper")
                                .HasColumnType("integer");

                            b1.Property<float>("BloodSugarLevel")
                                .HasColumnType("real");

                            b1.Property<int>("Heartbeat")
                                .HasColumnType("integer");

                            b1.Property<float>("Temperature")
                                .HasColumnType("real");

                            b1.Property<float>("Weight")
                                .HasColumnType("real");

                            b1.HasKey("PatientHealthMeasurementsId");

                            b1.ToTable("HealthMeasurements");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthMeasurementsId");
                        });

                    b.Navigation("HealthMeasurements");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.Report", b =>
                {
                    b.OwnsMany("HospitalLibrary.Core.Report.Model.Drug", "Drugs", b1 =>
                        {
                            b1.Property<string>("ReportId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("CompanyName")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("ReportId", "Id");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.OwnsMany("HospitalLibrary.Core.Report.Model.Symptom", "Symptoms", b1 =>
                        {
                            b1.Property<string>("ReportId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("ReportId", "Id");

                            b1.ToTable("Symptoms");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("Drugs");

                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Vacation.VacationRequest", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Doctor.Doctor", "Doctor")
                        .WithMany("VacationRequests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Consiliums.Consilium", b =>
                {
                    b.Navigation("ConsiliumAppointments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Doctor.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("VacationRequests");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Report.Model.Report", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Room.Room", b =>
                {
                    b.Navigation("Equipment");
                });
#pragma warning restore 612, 618
        }
    }
}
